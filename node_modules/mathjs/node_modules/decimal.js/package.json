{
  "name": "decimal.js",
  "description": "An arbitrary-precision Decimal type for JavaScript.",
  "version": "2.0.1",
  "keywords": [
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "number",
    "decimal",
    "float",
    "biginteger",
    "bigdecimal",
    "bignumber",
    "bigint",
    "bignum"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/MikeMcl/decimal.js.git"
  },
  "main": "decimal",
  "author": {
    "name": "Michael Mclaughlin",
    "email": "M8ch88l@gmail.com"
  },
  "engines": {
    "node": "*"
  },
  "license": "MIT",
  "scripts": {
    "test": "node ./test/every-test.js",
    "build": "uglifyjs decimal.js -c -m -o decimal.min.js --preamble '/* decimal.js v2.0.0 https://github.com/MikeMcl/decimal.js/LICENCE */'"
  },
  "readme": "![decimal.js](https://raw.githubusercontent.com/MikeMcl/decimal.js/gh-pages/decimaljs.png)\r\n\r\nAn arbitrary-precision Decimal type for JavaScript.\r\n<br>\r\n\r\n## Features\r\n\r\n  - Faster, smaller, and perhaps easier to use than JavaScript versions of Java's BigDecimal\r\n  - Simple API but full-featured\r\n  - Replicates the `toExponential`, `toFixed`, `toPrecision` and `toString` methods of JavaScript's Number type\r\n  - Includes a `toFraction` and correctly-rounded `exp`, `ln`, `log` and `sqrt` functions\r\n  - Supports non-integer powers (although performance is limited)\r\n  - Works with numbers with or without fraction digits in bases from 2 to 64 inclusive\r\n  - Stores values in an accessible decimal floating-point format\r\n  - No dependencies\r\n  - Wide platform compatibility: uses JavaScript 1.5 (ECMAScript 3) features only\r\n  - Comprehensive [documentation](http://mikemcl.github.io/decimal.js/) and test set\r\n  - 8 KB minified and gzipped\r\n\r\n![API](https://raw.githubusercontent.com/MikeMcl/decimal.js/gh-pages/API.png)\r\n\r\nThe library is similar to [bignumber.js](https://github.com/MikeMcl/bignumber.js/), but here\r\nprecision is specified in terms of significant digits instead of decimal places, and all\r\ncalculations are rounded to the precision (similar to Python's decimal module) rather than just\r\nthose involving division.\r\n\r\nThis library also adds `exp`, `ln` and `log` functions, among others, and supports non-integer powers.\r\n\r\nAnother major difference is that this library enables multiple Decimal constructors to be created\r\n each with their own configuration (e.g. precision and range). This is, however, a significantly\r\n larger library than *bignumber.js* and the even smaller [big.js](https://github.com/MikeMcl/big.js/).\r\n\r\n## Load\r\n\r\nThe library is the single JavaScript file *decimal.js* (or minified, *decimal.min.js*).\r\n\r\nIt can be loaded via a script tag in an HTML document for the browser\r\n\r\n    <script src='./relative/path/to/decimal.js'></script>\r\n\r\nor as a CommonJS, [Node.js](http://nodejs.org) or AMD module using `require`.\r\n\r\nFor Node, the library is also available from the [npm](https://npmjs.org/) registry\r\n\r\n    $ npm install decimal.js\r\n\r\nTo load with AMD loader libraries such as [requireJS](http://requirejs.org/):\r\n\r\n    require(['decimal'], function(Decimal) {\r\n        // Use Decimal here in local scope. No global Decimal.\r\n    });\r\n\r\n## Use\r\n\r\n*In all examples below, `var`, semicolons and `toString` calls are not shown.\r\nIf a commented-out value is in quotes it means `toString` has been called on the preceding expression.*\r\n\r\nThe library exports a single function object, `Decimal`, the constructor of Decimal numbers.\r\n\r\nIt accepts a value of type number *(up to 15 significant digits only)*, string or Decimal.\r\n\r\n    x = new Decimal(123.4567)\r\n    y = new Decimal('123456.7e-3')\r\n    z = new Decimal(x)\r\n    x.equals(y) && y.equals(z) && x.equals(z)        // true\r\n\r\nA base from 2 to 36 inclusive can also be specified.\r\n\r\n    x = new Decimal(1011, 2)             // '11'\r\n    y = new Decimal('zz.9', 36)          // '1295.25'\r\n    z = x.plus(y)                        // '1306.25'\r\n\r\nA Decimal is immutable in the sense that it is not changed by its methods.\r\n\r\n    0.3 - 0.1                     // 0.19999999999999998\r\n    x = new Decimal(0.3)\r\n    x.minus(0.1)                  // '0.2'\r\n    x                             // '0.3'\r\n\r\nThe methods that return a Decimal can be chained.\r\n\r\n    x.dividedBy(y).plus(z).times(9).floor()\r\n    x.times('1.23456780123456789e+9').plus(9876.5432321).dividedBy('4444562598.111772').ceil()\r\n\r\nMany method names have a shorter alias.\r\n\r\n    x.squareRoot().dividedBy(y).toPower(3).equals(x.sqrt().div(y).pow(3))         // true\r\n    x.cmp(y.mod(z).neg()) == 1 && x.comparedTo(y.modulo(z).negated()) == 1        // true\r\n\r\nLike JavaScript's Number type, there are `toExponential`, `toFixed` and `toPrecision` methods\r\n\r\n    x = new Decimal(255.5)\r\n    x.toExponential(5)              // '2.55500e+2'\r\n    x.toFixed(5)                    // '255.50000'\r\n    x.toPrecision(5)                // '255.50'\r\n\r\n and a base can be specified for `toString`.\r\n\r\n    x.toString(16)        // 'ff.8'\r\n    \r\nThere is a `toFraction` method with an optional *maximum denominator* argument\r\n\r\n    y = new Decimal(355)\r\n    pi = y.dividedBy(113)        // '3.1415929204'\r\n    pi.toFraction()              // [ '7853982301', '2500000000' ]\r\n    pi.toFraction(1000)          // [ '355', '113' ]\r\n\r\nand `isNaN` and `isFinite` methods, as `NaN` and `Infinity` are valid `Decimal` values.\r\n\r\n    x = new Decimal(NaN)                                           // 'NaN'\r\n    y = new Decimal(Infinity)                                      // 'Infinity'\r\n    x.isNaN() && !y.isNaN() && !x.isFinite() && !y.isFinite()      // true\r\n\r\nAll calculations are rounded to the number of significant digits specified by the `precision` property\r\nof the Decimal constructor and rounded using the rounding mode specified by the `rounding` property.\r\n\r\nAs mentioned above, multiple Decimal constructors can be created, each with their own independent\r\n configuration which applies to all Decimal numbers created from it.\r\n\r\n\r\n\r\n    Decimal.config({ precision: 5, rounding: 4 })\r\n\r\n    // constructor is a factory method and it can also accept a configuration object\r\n    Decimal10 = Decimal.constructor({ precision: 10, rounding: 1 })    \r\n\r\n    x = new Decimal(5)\r\n    y = new Decimal10(5)\r\n\r\n    x.div(3)                           // '1.6667'\r\n    y.div(3)                           // '1.666666666'\r\n\r\n    Decimal.precision                  // 5\r\n    Decimal10.precision                // 10\r\n\r\nMany of the methods of JavaScript's Math object are also replicated\r\n\r\n    Decimal.sqrt('6.98372465832e+9823')      // '8.3568682281821340204e+4911'\r\n    Decimal.pow(2, 0.0979843)                // '1.0702770511687781839'\r\n\r\nThe value of a Decimal is stored in a decimal floating point format in terms of a coefficient, exponent and sign.\r\n\r\n    x = new Decimal(-123.456);\r\n    x.c                                 // '1,2,3,4,5,6'    coefficient (i.e. significand)\r\n    x.e                                 // 2                exponent\r\n    x.s                                 // -1               sign\r\n\r\nFor further information see the [API](http://mikemcl.github.io/decimal.js/) reference in the *doc* directory.\r\n\r\n## Test\r\n\r\nThe *test* directory contains the test scripts for each method.\r\n\r\nThe tests can be run with Node or a browser.\r\n\r\nTo test a single method use, from a command-line shell in the root directory, for example\r\n\r\n    $ node test/toFraction\r\n\r\nTo test all the methods\r\n\r\n    $ node test/every-test\r\n\r\nor\r\n\r\n    $ npm test\r\n\r\nFor the browser, see *single-test.html* and *every-test.html* in the *test/browser* directory,\r\n\r\n\r\n## Build\r\n\r\nFor Node, if [uglify-js](https://github.com/mishoo/UglifyJS2) is installed\r\n\r\n    npm install uglify-js -g\r\n\r\nthen\r\n\r\n    npm run build\r\n\r\nwill create *decimal.min.js*.\r\n\r\nThe *decimal.min.js* already present was created with *Microsoft Ajax Minifier 5.8*.\r\n\r\n## Feedback\r\n\r\nOpen an issue, or email\r\nMichael <a href='mailto:M8ch88l@gmail.com'>M8ch88l@gmail.com</a>\r\n\r\n[Bitcoin](https://bitcoin.org/en/getting-started) donations gratefully received:\r\n**1PjzRBjGJycti49AXTiKsdC4PRCnTbyUyf**\r\n\r\nThank you\r\n\r\n## Licence\r\n\r\nMIT Expat.\r\n\r\nSee LICENCE.\r\n\r\n## Change Log\r\n\r\n####2.0.1\r\n* 10/04/2014 Update npmignore\r\n\r\n####2.0.0\r\n* 10/04/2014 Add `toSignificantDigits`\r\n* Remove `toInteger`\r\n* No arguments to `ceil`, `floor`, `round` and `trunc`\r\n\r\n####1.0.1\r\n* 07/04/2014 Minor documentation clean-up\r\n\r\n####1.0.0\r\n* 02/04/2014 Initial release\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/MikeMcl/decimal.js/issues"
  },
  "homepage": "https://github.com/MikeMcl/decimal.js",
  "_id": "decimal.js@2.0.1",
  "_from": "decimal.js@~2.0.1"
}
